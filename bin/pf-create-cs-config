#!/usr/bin/env php
<?php

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;

class PermafrostCreateCsConfigCommand extends Command
{
    protected function validTypes(): array
    {
        return [
            'laravel',
            'laravel:package',
            'laravel:project',
            'package',
            'project',
        ];
    }

    protected function handleError($output, string $message)
    {
        $output->writeln("Error: <info>$message</info>");

        return Command::FAILURE;
    }

    protected function targetConfigFilename(): string
    {
        $cwd = getcwd();

        return "$cwd/.php_cs.dist";
    }

    /**
     * {@inheritdoc}
     */
    public function execute(InputInterface $input, OutputInterface $output)
    {
        if ($this->targetFileExists()) {
            return $this->handleError($output, 'An existing ".php_cs.dist" file already exists.  Exiting.');
        }

        $type = strtolower($input->getFirstArgument());

        if (!in_array($type, $this->validTypes())) {
            return $this->handleError($output, 'Invalid type.  Specify one of: ' . implode(', ', $this->validTypes()) . '.');
        }

        $code = $this->generatePhpCsConfig(
            $this->determineCorrectFinder($type)
        );

        file_put_contents($this->targetConfigFilename(), $code);

        $output->writeln('<info>Successfully wrote configuration file.</info>');

        return Command::SUCCESS;
    }

    protected function targetFileExists()
    {
        return file_exists($this->targetConfigFilename());
    }

    /**
     * @param string $type
     *
     * @return string
     */
    protected function determineCorrectFinder(string $type): string
    {
        switch($type) {
            case 'laravel':
            case 'laravel:project':
                return 'LaravelProjectFinder';

            case 'laravel:package':
                return 'LaravelPackageFinder';

            case 'package':
                return 'ComposerPackageFinder';

            case 'project':
            default:
                return 'BasicProjectFinder';
        }
    }

    protected function generatePhpCsConfig(string $finderName)
    {
        $code = <<<CODE
<?php
require_once(__DIR__.'/vendor/autoload.php');

use Permafrost\\PhpCsFixerRules\\Finder\\$finderName;
use Permafrost\\PhpCsFixerRules\\SharedConfig;

\$finder = $finderName::create(__DIR__);

return SharedConfig::create(\$finder);
CODE;

        return trim($code);
    }

}

function executePermafrostCreateCsFixerConfigScript()
{
    (new SingleCommandApplication())
        ->setName('php-cs-fixer configuration generator') // Optional
        ->addArgument('type', InputArgument::OPTIONAL, 'The type of finder to use.')
        ->setCode(function(ArgvInput $input, OutputInterface $output) {
            $command = new PermafrostCreateCsConfigCommand();
            return $command->execute($input, $output);
        })
        ->run();
}

executePermafrostCreateCsFixerConfigScript();