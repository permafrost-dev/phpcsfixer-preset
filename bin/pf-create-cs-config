#!/usr/bin/env php
<?php declare(strict_types=1);
/*
 * This file is part of PHPUnit.
 *
 * (c) Sebastian Bergmann <sebastian@phpunit.de>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Composer\Factory;
use Composer\Json\JsonFile;
use Composer\Package\BasePackage;
use Composer\Package\Package;
use Composer\Package\Version\VersionParser;
use Composer\Package\Version\VersionSelector;
use Composer\Repository\CompositeRepository;
use Composer\Repository\PlatformRepository;
use Composer\Repository\RepositoryFactory;
use Composer\Repository\RepositorySet;
use Composer\Util\ProcessExecutor;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\ExecutableFinder;
use Symfony\Component\Process\Process;

class PermafrostCreateCsConfigCommand extends BaseCommand
{
    /**
     * {@inheritdoc}
     */
    protected function configure()
    {
        $this
            ->setName('pf-csconfig')
            ->setDescription('Creates a basic .php_cs.dist file in project directory.')
            ->setDefinition([
                new InputOption('type', null, InputOption::VALUE_OPTIONAL, 'Type of package (e.g. library, project, metapackage, composer-plugin)'),
            ])
            ->setHelp(
                <<<EOT
The <info>init</info> command creates a basic composer.json file
in the current directory.
<info>php composer.phar init</info>
Read more at https://getcomposer.org/doc/03-cli.md#init
EOT
            );
    }

    protected function validTypes(): array
    {
        return [
            'laravel',
            'laravel:package',
            'laravel:project',
            'package',
            'project',
        ];
    }

    protected function handleError($output, string $message)
    {
        $output->writeln("Error: <info>$message</info>");

        return false;
    }

    protected function targetConfigFilename(): string
    {
        $cwd = getcwd();

        return "$cwd/.php_cs.dist";
    }

    /**
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {

        if (file_exists($this->targetConfigFilename())) {
            return $this->handleError($output, 'An existing ".php_cs.dist" file already exists.  Exiting.');
        }

        $allowList = ['type'];
        $options = array_filter(array_intersect_key($input->getOptions(), array_flip($allowList)));

        $type = strtolower($input->getOption('type'));

        if (!in_aray($type, $this->validTypes())) {
            return $this->handleError('Invalid type.  Specify one of: ' . implode(', ', $this->validTypes()) . '.');
        }

        $finder = $this->determineCorrectFinder($type);
        $code = $this->generatePhpCsConfig($finder);

        file_put_contents($this->targetConfigFilename(), $code);

        $output->writeln("<info>Successfully wrote configuration file.</info>");
    }

    /**
     * @param string $type
     *
     * @return string
     */
    protected function determineCorrectFinder(string $type): string
    {
        switch($type) {
            case 'laravel':
            case 'laravel:project':
                return 'LaravelProjectFinder';

            case 'laravel:package':
                return 'LaravelPackageFinder';

            case 'package':
                return 'ComposerPackageFinder';

            case 'project':
            default:
                return 'BasicProjectFinder';
        }
    }

    protected function generatePhpCsConfig(string $finderName)
    {
        $code = <<<CODE
<?php

use Permafrost\\PhpCsFixerRules\\Finder\\$finderName;
use Permafrost\\PhpCsFixerRules\\SharedConfig;

\$finder = LaravelProjectFinder::create(__DIR__);

return SharedConfig::create(\$finder);
CODE;

        return trim($code);
    }


}